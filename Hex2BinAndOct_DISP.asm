; TRY TO WRITE A PROGRAM WITH A NESTED STRUCTURE OF SUBROUTINES AND DISPLAY THE INTEGERS IN BINARY
; AND OCTAL FORMS.

; + MAIN PROGRAM BANDO:
;	- STORE THE INTEGER NUMBERIC VARIABLE VAL1 IN THE STACK AND CALL THE SUBROUTINE PAIRS.

; + SUBROUTINE PAIRS:
;	- REMOVE VAL1 FROM THE STACK.
; 	- CALL THE BINARY DISPLAY PROGRAM OUTBIN TO DISPLAY ITS EQUIVALENT BINARY NUMBER.
;	- OUTPUT 8 SPACES.
; 	- CALL THE OCTAL DISPLAY PROGRAM OUTOCT TO DISPLAY ITS EQUIVALENT OCTAL NUMBER.
;	- CALL THE SUBROUTINE BREAKLINE TO OUTPUT CARRIAGE RETURN AND LINE FEED.

DATA SEGMENT
VAL1 DW 1234H
BINDISP DB 'BIN: $'
OCTDISP DB 'OCT: $'
SPACE DB '        $'				; DISPLAY 8 SPACES
BREAKLINE DB 0DH,0AH,'$'
DATA ENDS

STACK SEGMENT PARA STACK 'STACK'
DB 100 DUP(0)
STACK ENDS

CODE SEGMENT
ASSUME DS:DATA,CS:CODE
START:
	MOV AX,DATA
	MOV DS,AX
	MOV ES,AX
	CALL BANDO
QUIT:
	MOV AH,4CH
	INT 21H
									; MIAN PROGRAM BANDO
BANDO PROC NEAR
	PUSH VAL1
	CALL PAIRS
	RET
BANDO ENDP
									; SUBROUTINE PAIRS
PAIRS PROC NEAR
	POP BX
	POP AX
	CALL OUTBIN
	CALL OUTOCT
	RET
PAIRS ENDP
									; SUBROUTINE OUTBIN
OUTBIN PROC NEAR
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	
	MOV BX,AX
	MOV AH,09H						; DISPLAY BINDISP
	MOV DX,OFFSET BINDISP
	INT 21H
	MOV CX,10H						; A WORD-FIUGRE HAS 16 BITS
	MOV AH,02H
	LOOP1:
		MOV DL,BH
		AND DL,80H					; KEEP THE FISRST BIT OF BH MERELY
		PUSH CX						; 'CAUSE SHR NEEDS USING CL, PUSH CX IN STACK TO BACKUP THE ORIGIN DATA
		MOV CL,07H
		SHR DL,CL					; SHIFT THE FIRST BIT OF BH TO THE LAST BIT, AND SET THE OTHER BITS OF BH 0
		POP CX
		ADD DL,30H					; CONVERT THE NUMBERIC FIGURE TO CHARACTER
		INT 21H						; OUTPUT DL
		SHL BX,1					; SHIFT THE WHOLE BX TO LEFT BY 1 BIT SO AS TO OUTPUT EACH BIT OF BX 
		LOOP LOOP1
	MOV AH,02H
	MOV DL,'B'						; OUTPUT 'B' FOLLOWING BX
	INT 21H
	MOV AH,09H
	MOV DX,OFFSET SPACE				; OUTPUT 8 SPACES FOLLOWING 'B'
	INT 21H
	POP DX
	POP CX
	POP BX
	POP AX
	RET
OUTBIN ENDP

OUTOCT PROC NEAR
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	
	MOV BX,AX
	MOV AH,09H						; DISPLAY OCTDISP
	MOV DX,OFFSET OCTDISP
	INT 21H
	MOV CL,07H						; OUTPUT THE FIRST BIT OF BX
	MOV AH,02H
	MOV DL,BH
	AND DL,80H
	SHR DL,CL
	ADD DL,30H
	INT 21H
	SHL BX,1						; SHIFT THE WHOLE BX TO LEFT BY 1 BIT
	MOV CX,05H						; A OCTAL FIGURE EQUALS TO 3 BINARY BITS, THERE ARE 5 OCTAL FIGURES EXCEPT THE FIRST BIT
	LOOP2:
		MOV DL,BH
		AND DL,0E0H					; KEEP THE FIRST 3 BITS OF BH MERELY
		PUSH CX
		MOV CL,05H					; SHIFT THE FIRST 3 BITS OF BH TO THE LAST 3 BITS, AND SET THE OTHER BITS OF BH 0
		SHR DL,CL
		POP CX
		ADD DL,30H
		INT 21H
		SHL BX,3					; SHIFT THE WHOLE BX TO LEFT BY 3 BITS SO AS TO CONVERT EACH 3 BITS OF BX TO A OCTAL
		LOOP LOOP2					; FIGURES AND OUTPUT THEM
	MOV AH,02H
	MOV DL,'O'						; OUTPUT 'B' FOLLOWING BX
	INT 21H
	CALL NEXTLINE					; CALL THE SUBROUTINE BREAKLINE
	POP DX
	POP CX
	POP BX
	POP AX
	RET
OUTOCT ENDP

NEXTLINE PROC NEAR
	PUSH AX
	PUSH DX
	MOV AH,09H
	MOV DX,OFFSET BREAKLINE
	INT 21H
	POP DX
	POP AX
	RET
NEXTLINE ENDP

CODE ENDS
	END START